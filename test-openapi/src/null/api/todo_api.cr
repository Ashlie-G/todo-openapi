# #todo
#
##Todo List
#
#The version of the OpenAPI document: 1.0.0
#Contact: jland@redhat.com
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.0.1
#

require "uri"

module Test
  class TodoApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a todo
    # Creates a new instance of a `todo`.
    # @param todo [Todo] A new &#x60;todo&#x60; to be created.
    # @return [nil]
    def create_todo(todo : Todo, completed : Bool?)
      create_todo_with_http_info(todo, completed)
      nil
    end

    # Create a todo
    # Creates a new instance of a &#x60;todo&#x60;.
    # @param todo [Todo] A new &#x60;todo&#x60; to be created.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_todo_with_http_info(todo : Todo, completed : Bool?)
      if @api_client.config.debugging
        Log.debug {"Calling API: TodoApi.create_todo ..."}
      end
      # verify the required parameter "todo" is set
      if @api_client.config.client_side_validation && todo.nil?
        raise ArgumentError.new("Missing the required parameter 'todo' when calling TodoApi.create_todo")
      end
      # resource path
      local_var_path = "/todos"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"completed"] = completed

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = todo.to_json

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"TodoApi.create_todo",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: TodoApi#create_todo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete a todo
    # Deletes an existing `todo`.
    # @param todo_id [String] A unique identifier for a &#x60;todo&#x60;.
    # @return [nil]
    def delete_todo(todo_id : String)
      delete_todo_with_http_info(todo_id)
      nil
    end

    # Delete a todo
    # Deletes an existing &#x60;todo&#x60;.
    # @param todo_id [String] A unique identifier for a &#x60;todo&#x60;.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_todo_with_http_info(todo_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: TodoApi.delete_todo ..."}
      end
      # verify the required parameter "todo_id" is set
      if @api_client.config.client_side_validation && todo_id.nil?
        raise ArgumentError.new("Missing the required parameter 'todo_id' when calling TodoApi.delete_todo")
      end
      # resource path
      local_var_path = "/todos/{todoId}".sub("{" + "todoId" + "}", URI.encode(todo_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"TodoApi.delete_todo",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: TodoApi#delete_todo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Get a todo
    # Gets the details of a single instance of a `todo`.
    # @param todo_id [String] A unique identifier for a &#x60;todo&#x60;.
    # @return [Todo]
    def get_todo(todo_id : String)
      data, _status_code, _headers = get_todo_with_http_info(todo_id)
      data
    end

    # Get a todo
    # Gets the details of a single instance of a &#x60;todo&#x60;.
    # @param todo_id [String] A unique identifier for a &#x60;todo&#x60;.
    # @return [Array<(Todo, Integer, Hash)>] Todo data, response status code and response headers
    def get_todo_with_http_info(todo_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: TodoApi.get_todo ..."}
      end
      # verify the required parameter "todo_id" is set
      if @api_client.config.client_side_validation && todo_id.nil?
        raise ArgumentError.new("Missing the required parameter 'todo_id' when calling TodoApi.get_todo")
      end
      # resource path
      local_var_path = "/todos/{todoId}".sub("{" + "todoId" + "}", URI.encode(todo_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Todo"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"TodoApi.get_todo",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: TodoApi#get_todo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Todo.from_json(data), status_code, headers
    end

    # List All todos
    # Gets a list of all `todo` entities.
    # @return [Array(Todo)]
    def get_todos(completed : Bool?)
      data, _status_code, _headers = get_todos_with_http_info(completed)
      data
    end

    # List All todos
    # Gets a list of all &#x60;todo&#x60; entities.
    # @return [Array<(Array(Todo), Integer, Hash)>] Array(Todo) data, response status code and response headers
    def get_todos_with_http_info(completed : Bool?)
      if @api_client.config.debugging
        Log.debug {"Calling API: TodoApi.get_todos ..."}
      end
      # resource path
      local_var_path = "/todos"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"completed"] = completed

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(Todo)"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"TodoApi.get_todos",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: TodoApi#get_todos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(Todo).from_json(data), status_code, headers
    end

    # Update a todo
    # Updates an existing `todo`.
    # @param todo_id [String] A unique identifier for a &#x60;todo&#x60;.
    # @param todo [Todo] Updated &#x60;todo&#x60; information.
    # @return [nil]
    def update_todo(todo_id : String, todo : Todo)
      update_todo_with_http_info(todo_id, todo)
      nil
    end

    # Update a todo
    # Updates an existing &#x60;todo&#x60;.
    # @param todo_id [String] A unique identifier for a &#x60;todo&#x60;.
    # @param todo [Todo] Updated &#x60;todo&#x60; information.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_todo_with_http_info(todo_id : String, todo : Todo)
      if @api_client.config.debugging
        Log.debug {"Calling API: TodoApi.update_todo ..."}
      end
      # verify the required parameter "todo_id" is set
      if @api_client.config.client_side_validation && todo_id.nil?
        raise ArgumentError.new("Missing the required parameter 'todo_id' when calling TodoApi.update_todo")
      end
      # verify the required parameter "todo" is set
      if @api_client.config.client_side_validation && todo.nil?
        raise ArgumentError.new("Missing the required parameter 'todo' when calling TodoApi.update_todo")
      end
      # resource path
      local_var_path = "/todos/{todoId}".sub("{" + "todoId" + "}", URI.encode(todo_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = todo.to_json

      # return_type
      return_type = nil

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"TodoApi.update_todo",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: TodoApi#update_todo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end
  end
end
